#!/usr/bin/env node
import { Command } from 'commander';
import { generate } from 'build-number-generator';
import fs from 'fs';
import util from 'util';

const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

const template = (version) =>
    [
        '// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.',
        '// To validate version number use https://prantlf.github.io/build-number-generator/',
        `const VERSION = '${version}';`,
        'export default VERSION;',
    ].join('\r\n');

async function exec(source, dest) {
    const version = await readVersion(source);
    await writeVersion(dest, version);
    // eslint-disable-next-line no-console
    console.log(`Generated version number: ${version}`);
}

async function readVersion(source) {
    let data, json;

    try {
        data = await readFile(source, 'utf8');
    } catch (e) {
        throw new Error('file not found');
    }

    try {
        json = JSON.parse(data);
    } catch (e) {
        throw new Error("file doesn't contain valid json");
    }

    if (!('version' in json)) {
        throw new Error("file doesn't contain version");
    }

    return generate(json.version);
}

async function writeVersion(path, version) {
    const data = template(version);
    await writeFile(path, data);
}

const program = new Command();
program
    .description("A tiny command line tool that extract `package.json` version and generate `const VERSION='...'` file")
    .usage('./package.json ./src/version.js')
    .argument('<package.json>', 'filename to a valid package.json file containing a version')
    .argument('<target_file>', 'filename of the target file where to save extracted version')
    .showHelpAfterError()
    .action(exec)
    .parseAsync(process.argv);
